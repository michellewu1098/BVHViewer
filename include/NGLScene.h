//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief Class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL, handles inputs from user
/// @author Jonathan Macey, Michelle Wu
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

#ifndef NGLSCENE_H_
#define NGLSCENE_H_


#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>

#include <QKeyEvent>
#include <QOpenGLWidget>

#include "BVHScene.h"
#include "WindowParams.h"


class NGLScene : public QOpenGLWidget
{
  Q_OBJECT

public:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Ctor for our NGL drawing class
  /// @param [in] _parent Parent window to the class
  //----------------------------------------------------------------------------------------------------------------------
  NGLScene( QWidget* _parent );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Dtor must close down ngl and release OpenGL resources
  //----------------------------------------------------------------------------------------------------------------------
  ~NGLScene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initialize class is called once when the window is created and we have a valid GL context
  /// use this to setup any default GL stuff
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL() override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Function called everytime we want to draw the scene
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL() override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This is called everytime we resize the window
  /// @param [in] _w Width
  /// @param [in] _h Height
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(int _w, int _h) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set BVH file path from gui input
  /// @param [in] _path File path
  //----------------------------------------------------------------------------------------------------------------------
  void SetBVHFilePath( const std::string &_path );
  //----------------------------------------------------------------------------------------------------------------------
  // ANIMATION CONTROLLERS
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Pause (or play) animation
  /// @param [in] _pause Used to indicate whether to pause or play the animation
  //----------------------------------------------------------------------------------------------------------------------
  void PauseAnimation( bool _pause );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Play animation backward
  //----------------------------------------------------------------------------------------------------------------------
  void BackwardAnimation();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Play animation forward
  //----------------------------------------------------------------------------------------------------------------------
  void ForwardAnimation();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Reset animation from start
  //----------------------------------------------------------------------------------------------------------------------
  void ResetAnimation();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Play next frame
  //----------------------------------------------------------------------------------------------------------------------
  void NextFrame();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Play previous frame
  //----------------------------------------------------------------------------------------------------------------------
  void PreviousFrame();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns tot number of frames to be displayed on UI
  //----------------------------------------------------------------------------------------------------------------------
  unsigned int GetTotNumFrames();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Returns current frame being rendered for display
  //----------------------------------------------------------------------------------------------------------------------
  unsigned int GetCurrentFrame();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set current motion used
  /// @param [in] _currentMotion Motion type: (0, motion1) (1, motion2) (2, motion3)
  //----------------------------------------------------------------------------------------------------------------------
  void SetCurrentMotion( const int& _currentMotion );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Sets blending options chose by user through dialog window
  /// @param [in] _startFrame Start frame number from Animation 1
  /// @param [in] _endFrame End frame number from Animation 2
  /// @param [in] _blendRange Range of frames where to perform interpolation
  /// @param [in] _type Blend type (cubic or slerp)
  //----------------------------------------------------------------------------------------------------------------------
  void SetBlendingOptions( const unsigned int& _startFrame,
                           const unsigned int& _endFrame,
                           const unsigned int& _blendRange,
                           const unsigned int& _type );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Allows to check if system is ready to perform interpolation
  //----------------------------------------------------------------------------------------------------------------------
  std::vector< unsigned int > CheckBlendingReady();
  //----------------------------------------------------------------------------------------------------------------------

private:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Timer id
  //----------------------------------------------------------------------------------------------------------------------
  int m_timerID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check if file has been loaded
  //----------------------------------------------------------------------------------------------------------------------
  bool m_isLoaded;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief BVH filename
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_filename;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The BVH scene
  //----------------------------------------------------------------------------------------------------------------------
  BVHScene m_scene;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Window's parameters such as mouse and rotations etc
  //----------------------------------------------------------------------------------------------------------------------
  WinParams m_win;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Matrix used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Text for rendering frame count
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr< ngl::Text > m_text;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when a key is pressed
  /// @param [in] _event Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent( QKeyEvent *_event ) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This method is called every time a mouse is moved
  /// @param [in] _event Qt event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent ( QMouseEvent * _event ) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param [in] _event Qt event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent ( QMouseEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param [in] _event Qt event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent ( QMouseEvent *_event ) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This method is called everytime the mouse wheel is moved
  /// inherited from QObject and overridden here.
  /// @param [in] _event Qt event structure
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent( QWheelEvent *_event) override;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Timer event triggered by startTimer()
  /// @param [in] _event Qt event structure
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent( QTimerEvent *_event ) override;
  //----------------------------------------------------------------------------------------------------------------------

};

#endif
